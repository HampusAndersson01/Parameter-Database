:root {
  --Row-Height: 35px;
}

.Table-Container {
  overflow-y: auto;
}

table {
  min-width: 100%;
  text-align: center;
  overflow-x: scroll;
  table-layout: fixed;
  border-collapse: collapse;
}
thead {
  background-color: var(--Black);
  color: var(--White);
}
thead.sticky {
  position: fixed;
  top: 0;
  z-index: 1;
  width: 100vw;
}
thead th {
  padding: 0.5rem;
}
tbody td {
  border-bottom: 1px solid var(--Grey300);
  overflow: hidden;
  padding: 0 0.5rem;
}
td,
th {
  height: var(--Row-Height);
  text-overflow: ellipsis;
  white-space: nowrap;
}
tbody tr {
  overflow: hidden;
}
/* TODO Fix min width on table */
#TableIndex {
  width: 7ch;
}
#TableName {
  width: 40ch;
}
#TableDescription {
  width: 30ch;
}
#TableUnit {
  width: 15ch;
}
#TableRig {
  width: 10ch;
}
.reloadButton {
  cursor: pointer;
  position: relative;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}
.reloadButton path {
}
.reloadButton:hover path,
.reloadButton.reloading path {
  color: var(--Highlight-Hover);
  animation-name: spin;
  animation-duration: 1.5s;
  animation-timing-function: linear;
  animation-iteration-count: infinite;
  transform-origin: center;
}

@keyframes spin {
  from {
    transform: rotate(0);
  }
  to {
    transform: rotate(-360deg);
  }
}

.tableArrow {
  transition: transform 0.2s ease-in-out;
  padding: 0;
}
.tableArrow:hover {
  cursor: pointer;
}
.tableArrow svg {
  height: 30px;
  width: 30px;
  fill: var(--Grey600);
}
.tableArrow.expanded {
  transform: scale(1, -1);
  transition: transform 0.2s ease-in-out;
}

.Expandable-Row {
  display: none;
  background-color: var(--Grey100);
}
.Expandable-Row.Active-Row {
  display: table-row;
}
.Expandable-Area {
  background-color: var(--Grey100);
  height: calc(var(--Row-Height) * 10);
  width: 100%;
  display: grid;
  grid-template-columns: 20% 80%;
  grid-template-rows: 8fr;
  gap: 0px 0px;
  grid-template-areas: "Expandable-Left Expandable-Right";
  position: relative;
}
.Expandable-Area.editing {
  height: calc(var(--Row-Height) * 10 + 2rem);
  grid-template-rows: 2rem 8fr;
  grid-template-areas:
    "toolbar toolbar"
    "Expandable-Left Expandable-Right";
}

.Expandable-Left {
  display: flex;
  flex-grow: 1;
  flex-basis: 0;
  flex-direction: column;
  justify-content: space-between;
  align-items: center;
  width: 100%;
  height: calc(var(--Row-Height) * 10);
  max-height: 100%;
  grid-area: Expandable-Left;
}
.Name,
.Rig_Family {
  grid-area: ParameterName;
  flex-grow: 1;
  overflow-y: auto;
  overflow-x: hidden;
}

.Rig_Family_Description,
.Description {
  grid-area: RigFamilyDescription;
  flex-grow: 2;
  overflow-y: auto;
  overflow-x: hidden;
}
.Expandable-Left > div {
  width: 100%;
}
.Expandable-Right {
  display: grid;
  height: calc(var(--Row-Height) * 10);
  max-height: 100%;
  grid-template-columns: 1fr 2.5fr 4fr 2.5fr;
  grid-template-rows: repeat(5, minmax(0, 1fr));
  gap: 0px 0px;
  grid-auto-flow: row;
  grid-template-areas:
    "ParameterUnit ParameterCreated ParameterPossibleValues Images"
    "ParameterDecimals ParameterCreatedBy ParameterPossibleValues Images"
    "ParameterMin ParameterLastModified ParameterPossibleValues Images"
    "ParameterMax ParameterLastModifiedBy ParameterPossibleValues Images"
    "ParameterType ParameterComment ParameterPossibleValues Images";
  grid-area: Expandable-Right;

}

.Images-Container {
  height: 100%;
  width: 20vw;
  overflow: hidden;
  grid-area: Images;
  position: relative;
}
.Images-Container img {
  height: 100%;
  width: 100%;
  object-fit: contain;
  display: block;
}
.Image.Active {
  display: block;
}
.Image-Nav {
  position: absolute;
  bottom: 0;
  z-index: 1;
  display: flex;
  justify-content: space-between;
  width: 100%;
  height: 100%;
}
.Image-Nav svg {
  stroke: var(--Grey300);
  stroke-width: 0.5px;
  height: 100%;
}
.Image-Nav svg:hover {
  cursor: pointer;
  stroke: var(--Grey600);
  background-color: rgba(0, 0, 0, 0.24);
  border-radius: 2px;
}
.Image-Nav svg.Disabled {
  opacity: 0;
}
.Image-Nav p {
  color: white;
  margin-top: auto;
  margin-bottom: 0;
  font-size: 1.25rem;
  text-shadow: -1px -1px 0 black;
}
.Comment-Container {
  grid-area: Comment;
}

.PossibleValues {
  grid-area: PossibleValues;
}
.Possible_Values fieldset {
  max-height: 100%;
  overflow-y: auto;
}

.Unit {
  grid-area: ParameterUnit;
}
.Decimals {
  grid-area: ParameterDecimals;
}
.Min {
  grid-area: ParameterMin;
}
.Max {
  grid-area: ParameterMax;
}
.Type {
  grid-area: ParameterType;
}
.Created {
  grid-area: ParameterCreated;
}
.Created_By {
  grid-area: ParameterCreatedBy;
}
.Last_Modified {
  grid-area: ParameterLastModified;
}
.Modified_By {
  grid-area: ParameterLastModifiedBy;
}
.Comment {
  grid-area: ParameterComment;
}
.Possible_Values {
  grid-area: ParameterPossibleValues;
}
.Images {
  grid-area: Images;
}
.expandableAreaToolbar {
  display: none;
  justify-content: flex-start;
  align-items: center;
  height: 100%;
  width: 100%;
  grid-area: toolbar;
  background-color: var(--Dark_Blue);
  border-radius: 0 0 0.5rem 0.5rem;
  padding: 0 1rem;
}
.Expandable-Area.editing .expandableAreaToolbar {
  display: flex;
}

.Expandable-Save,
.Expandable-Delete {
  z-index: 1;
  display: block;
  height: 100%;
  width: min-content;
  margin: 0 0.5rem;
}
.Expandable-Save svg,
.Expandable-Delete svg {
  height: 100%;
  width: min-content;
  cursor: pointer;
  fill: var(--White);
}
.Expandable-Save svg:hover {
  fill: var(--Highlight-Hover);
}
.Expandable-Delete svg:hover {
  fill: var(--Error-Default);
}
